@each $brightness-identifier in $--BRIGHTNESS-MODES {
  $opposite-brightness-identifier: without($--BRIGHTNESS-MODES, $brightness-identifier);
  //  Set up some variables specific to this brightness mode
  $brightness-palette: map-get($palette, $brightness-identifier);
  $opposite-brightness-palette: map-get-deep($palette, $opposite-brightness-identifier);
  // Variables decorators for easy access
  $bnp: $brightness-palette;
  $obnp: $opposite-brightness-palette;

  .#{$brightness-identifier} {
    @each $contrast in $--CONTRAST-MODES {
      $background: map-get-deep($bnp, 'bg', $contrast);
      $foreground: map-get-deep($bnp, 'fg', $contrast);
      $border: darken($background, 12.3);
      $container: darken($background, 6.2);
      $panel-row: lighten($background, 2.35);
      $border-softer: darken($background, 6.5);
      $container-softer: darken($background, 2.8);

      &.#{$contrast} {
        .tooltipped::after {
          color: $background;
          background: map-get-deep($obnp, 'bg', $contrast);
        }

        .editor {
          color: map-get-deep($bnp, 'fg', $contrast);
          background-color: $background;
        }

        .sidebar {
          border-right-color: $border;
          background-color: $container;
        }

        .tabs {
          border-bottom-color: $border;
          background-color: $container;
        }

        .findreplace {
          border-top-color: $border;
          background-color: $container;
          button {
            color: grayscale($foreground);
            &:hover {
              background-color: $background;
            }
            &:active {
              background-color: $border;
            }
          }
        }

        .statusbar {
          border-top-color: $border;
          background-color: $container;
        }

        .tab {
          &.selected {
            border-right-color: $border;
            border-left-color: $border;
            background-color: $background;
          }
        }

        .command-palette-wrapper {
          border-color: $border;
          background-color: $container;
        }

        .command-palette-header {
          border-bottom-color: $border;
        }

        .commands li {
          border-bottom-color: $border;
          &.selected, &:hover {
            background-color: $panel-row;
          }
        }

        // Disable Command Palette Selected Row Highlight

        &.no-command-palette-highlight {
          .commands li {
            &.selected, &:hover {
              background-color: $transparent;
            }
          }
        }

        .command-palette-wrapper, .findreplace {
          input {
            color: $foreground;
            background-color: $background;
          }
        }

        // Configurator
        .config-sections {
          li {
            &:nth-child(even) {
              background-color: lighten($background, 1);
            }
            &:hover {
              background-color: darken($background, 3);
            }
          }
        }

        .pill-switch {
          input:checked + label {
            color: $background;
          }
        }

        // Less Contrast Option

        &.contrast-less {
          .sidebar {
            border-right-color: $border-softer;
            background-color: $container-softer;
          }

          .tabs {
            border-bottom-color: $border-softer;
            background-color: $container-softer;
          }

          .findreplace {
            border-top-color: $border-softer;
            background-color: $container-softer;
            button:active {
              background-color: $border-softer;
            }
          }

          .statusbar {
            border-top-color: $border-softer;
            background-color: $container-softer;
          }

          .tab.selected {
            border-right-color: $border-softer;
            border-left-color: $border-softer;
          }

          .command-palette-wrapper {
            background-color: $container-softer;
          }

          .command-palette-wrapper, .command-palette-header, .commands li {
            border-color: $border-softer;
          }
        }

        // Highlight Active Buttons
        &.highlight-active-buttons {
          .icon-button.selected {
            background-color: $background;
          }
        }

        // Scrollbars (WebKit Only)
        .code {
          &::-webkit-scrollbar-track {
            border-left: 1px solid $border;
            background: $container;
          }
        }
      }
      // END CONTRAST MODES
    }

    .tabs {
      color: grayscale(map-get($bnp, 'fg3'));
    }

    .command-palette-wrapper {
      color: grayscale(map-get($bnp, 'fg4'));
    }

    .commands li .match {
      color: grayscale(map-get($bnp, 'fg1'));
    }

    .icon {
      color: map-get($bnp, 'bg3');
      &:hover {
        color: map-get($bnp, 'fg4');
      }
      &:active, &.selected {
        color: map-get($bnp, 'fg1');
      }
    }

    .icon-button {
      &.selected > .icon {
        color: map-get($bnp, 'fg1');
      }
    }

    .sidebar {
      h1 {
        color: grayscale(map-get($bnp, 'fg1'));
      }
    }

    .tree-view {
      color: grayscale(map-get($bnp, 'gray'));
      > li {
        .icon {
          color: map-get($bnp, 'gray');
        }
        &.expanded, &.selected, &:hover {
          color: grayscale(map-get($bnp, 'fg1'));
          > .icon {
            color: map-get($bnp, 'fg2');
          }
        }
      }
    }

    .tab {
      color: grayscale(map-get($bnp, 'gray'));
      &:hover {
        color: grayscale(map-get($bnp, 'fg3'));
      }
      &.selected {
        color: grayscale(map-get($bnp, 'fg2'));
      }
      &.modified > .icon {
        color: map-get($bnp, 'yellow');
      }
      &:not(.modified) > .icon:hover {
        color: map-get($bnp, 'red');
      }
    }

    &.underline-modified-tabs .tab.modified {
      border-bottom-color: map-get($bnp, 'gray');
    }

    .statusbar {
      color: grayscale(map-get($bnp, 'fg3'));
    }

    .status-button {
      li {
        border-left-color: map-get($bnp, 'bg1');
        &:hover {
          color: grayscale(map-get($bnp, 'fg1'));
        }
      }
    }

    // Sideline Command Palette
    &.sideline-command-palette {
      .commands li.selected, .commands li:hover {
        border-left-color: map-get($bnp, 'fg3');
      }
    }

    // Buffer
    .buffer li *::selection {
      background: fade-out(map-get($bnp, 'bg1'), .01);
    }


    .line-numbers {
      color: map-get($bnp, 'gray');
    }

    // Syntax Highlighting
    .punctuation {
      color: $foreground;
    }

    .whitespace {
      color: fade-out(map-get($bnp, 'fg1'), .5);
    }

    .string {
      color: map-get($bnp, 'green');
    }

    .constant {
      color: map-get($bnp, 'purple');
    }

    // Main Content
    .content-body {
      color: grayscale(map-get($bnp, 'fg3'));
    }

    .config-sections li {
      border-color: map-get($bnp, 'bg2');
    }

    .pill-switch {
      label {
        color: grayscale(map-get($bnp, 'fg4'));
        &:hover {
          color: grayscale(map-get($bnp, 'fg1'));
        }
      }
      input:checked + label {
        background-color: map-get($bnp, 'aqua');
      }
    }

    .checkbox {
      input:checked + label .icon {
        color: map-get($bnp, 'aqua');
      }
    }

    a {
      color: map-get($bnp, 'blue');
    }

    .banner-image {
      color: grayscale(map-get($bnp, 'fg1'));
    }

    .info {
      border-top-color: (map-get($bnp, 'bg1'));
      border-bottom-color: (map-get($bnp, 'bg2'));
      a {
        color: grayscale(map-get($bnp, 'fg1'));
        &:hover {
          color: grayscale($foreground);
        }
      }
      cite a:first-child {
        animation-name: spin-colors-#{$brightness-identifier};

        color: map-get($bnp, 'red');
      }
    }

    .call-to-action {
      &:first-child {
        color: map-get($bnp, 'green');
        border-color: map-get($bnp, 'green');
      }
      &:nth-child(2) {
        color: map-get($bnp, 'blue');
        border-color: map-get($bnp, 'blue');
      }
      &:last-child {
        color: map-get($bnp, 'purple');
        border-color: map-get($bnp, 'purple');
      }
    }

    // Accent Colors
    @each $k, $v in map-get($palette, 'accents') {
      $opposite-color: map-get($v, '#{$opposite-brightness-identifier}');
      $color: map-get($v, '#{$brightness-identifier}');
      &.#{$k} {
        @include accent-colored($color);
        &.opposite {
          @include accent-colored($opposite-color);
        }
      }
    }
  }
  // END ACCENT COLORS
}

// Neutral Accent Colors
&.neutral {
  @each $k, $v in map-get($palette, 'accents') {
    &.#{$k} {
      $neutral-color: map-get($v, 'neutral');
      @include accent-colored($neutral-color);
    }
  }
}
